/*
 * Books API
 *
 * This web service offers information on books
 *
 * API version: 0.1.9
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"net/http"
	"path"
)

/***************************************************************************/
//                              AUTHOR
/***************************************************************************/

var authors = []Author{
	Author{AuthorId: "author", Name: "author", Nationality: "author", Genere: "author", Birth: "author", BookIds: []string{"Book1"}},
}

func findAuthor(x string) int {
	for i, author := range authors {
		if x == author.AuthorId {
			return i
		}
	}
	return -1
}

func AuthorAuthorIdDelete(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findAuthor(id)
	if i == -1 {
		return
	}
	authors = append(authors[:i], authors[i+1:]...)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func AuthorAuthorIdGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findAuthor(id)
	if i == -1 {
		return
	}
	dataJson, _ := json.Marshal(authors[i])
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func AuthorAuthorIdPut(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findAuthor(id)
	if i == -1 {
		return
	}
	authorRef := &authors[i]

	len := r.ContentLength
	body := make([]byte, len)
	r.Body.Read(body)
	author := Author{}
	json.Unmarshal(body, &author)

	authorRef.Name = isValidUpdate(authorRef.Name, author.Name)
	authorRef.Nationality = isValidUpdate(authorRef.Nationality, author.Nationality)
	authorRef.Genere = isValidUpdate(authorRef.Genere, author.Genere)
	authorRef.Birth = isValidUpdate(authorRef.Birth, author.Birth)
	authorRef.BookIds = author.BookIds
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func AuthorPost(w http.ResponseWriter, r *http.Request) {
	var author Author
	err := json.NewDecoder(r.Body).Decode(&author)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	authors = append(authors, author)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func AuthorAuthorIdBooksGet(w http.ResponseWriter, r *http.Request) {
	dir := path.Dir(r.URL.Path)
	id := path.Base(dir)
	i := findAuthor(id)
	if i == -1 {
		return
	}
	author := &authors[i]

	var response []Book

	for _, bkId := range author.BookIds {
		j := find(bkId)
		if j == -1 {
			return
		}
		response = append(response, books[j])
	}

	dataJson, _ := json.Marshal(books)

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}
