/*
 * Books API
 *
 * This web service offers information on books
 *
 * API version: 0.1.9
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"net/http"
	"path"
)

/***************************************************************************/
//                              Publisher
/***************************************************************************/

var publishers = []Publisher{
	Publisher{PublisherId: "Publisher1", Name: "Publisher1", Country: "Publisher1", Founded: "Publisher1", Genere: "Publisher1", BookIds: []string{"Book1"}},
	Publisher{PublisherId: "Publisher2", Name: "Publisher2", Country: "Publisher2", Founded: "Publisher2", Genere: "Publisher2", BookIds: []string{"Book2"}},
}

func findPublisher(x string) int {
	for i, publisher := range publishers {
		if x == publisher.PublisherId {
			return i
		}
	}
	return -1
}

func PublisherPost(w http.ResponseWriter, r *http.Request) {
	var publisher Publisher
	err := json.NewDecoder(r.Body).Decode(&publisher)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	publishers = append(publishers, publisher)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PublisherPublisherIdDelete(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findPublisher(id)
	if i == -1 {
		return
	}
	publishers = append(publishers[:i], publishers[i+1:]...)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PublisherPublisherIdGet(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findPublisher(id)
	if i == -1 {
		return
	}
	dataJson, _ := json.Marshal(publishers[i])
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.Write(dataJson)
	w.WriteHeader(http.StatusOK)
}

func PublisherPublisherIdPut(w http.ResponseWriter, r *http.Request) {
	id := path.Base(r.URL.Path)
	i := findPublisher(id)
	if i == -1 {
		return
	}
	publisherRef := &publishers[i]

	len := r.ContentLength
	body := make([]byte, len)
	r.Body.Read(body)
	publisher := Publisher{}
	json.Unmarshal(body, &publisher)

	publisherRef.PublisherId = isValidUpdate(publisherRef.PublisherId, publisher.PublisherId)
	publisherRef.Name = isValidUpdate(publisherRef.Name, publisher.Name)
	publisherRef.Country = isValidUpdate(publisherRef.Country, publisher.Country)
	publisherRef.Founded = isValidUpdate(publisherRef.Founded, publisher.Founded)
	publisherRef.Genere = isValidUpdate(publisherRef.Genere, publisher.Genere)
	publisherRef.BookIds = publisher.BookIds
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
